@import "elr-scss-functions/src/main";
@import "elr-scss-config/src/main";

// Buttons

// Styles a rounded button with a 1px border and transparent background
// Useful for <button> and <a> elements

@mixin elr-button($config: ()) {
  $config: extend(
    (
      font-size: $base-fontsize,
      width: null,
      border-radius: $border-radius,
      background-color: $primary-color,
      border-color: null,
      hover-color: null,
      color: $white,
      pill: false,
      border-style: solid,
      border-width: 1px,
    ),
    $config
  );

  $font-size: map-get($config, font-size);
  $width: map-get($config, width);
  $border-radius: map-get($config, border-radius);
  $border-color: map-get($config, border-color);
  $border-style: map-get($config, border-style);
  $border-width: map-get($config, border-width);
  $background-color: map-get($config, background-color);
  $hover-color: map-get($config, hover-color);
  $color: map-get($config, color);
  $pill: map-get($config, pill);

  box-sizing: border-box;
  background-color: $background-color;
  color: $color;
  padding: $base-fontsize ($base-fontsize * 1.5);
  font-size: $font-size;
  line-height: $font-size;
  max-width: 100%;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  text-shadow: none;
  box-shadow: none;
  font-weight: bold;
  display: inline-block;
  border-width: $border-width;
  border-style: $border-style;

  @if ($border-color) {
    border-color: $border-color;
  } @else {
    border-color: $background-color;
  }

  transition: background-color 0.3s, color 0.3s, border-color 0.3s;
  min-width: 200px;
  text-shadow: $text-shadow;
  border-radius: $border-radius;

  @if $width {
    width: $width;
  }

  &:hover,
  &.active {
    text-decoration: none;
    text-shadow: none;
    box-shadow: none;
  }

  &:hover {
    @if ($hover-color) {
      background-color: $hover-color;
      border-color: $hover-color;
    } @else {
      background-color: lighten($background-color, 10%);
      border-color: lighten($background-color, 10%);
    }
  }

  &.button-ghost {
    color: $background-color;
    text-shadow: none;
    background: transparent;

    &:hover {
      @if ($hover-color) {
        background-color: $hover-color;
        border-color: $hover-color;
      } @else {
        background-color: $background-color;
        border-color: $background-color;
        color: $white;
      }
    }
  }

  &.button-pill {
    border-radius: 100px;
  }
}

@mixin elr-button-branded($config: ()) {
  $config: extend(
    (
      primary-color: $primary-color,
      secondary-color: #db0079,
      tertiary-color: $tertiary-color,
    ),
    $config
  );

  $primary-color: map-get($config, primary-color);
  $secondary-color: map-get($config, secondary-color);
  $tertiary-color: map-get($config, tertiary-color);

  &.button-primary {
    background-color: $primary-color;
    border-color: $primary-color;

    &:hover {
      background-color: lighten($primary-color, 10%);
      border-color: lighten($primary-color, 10%);
    }

    &.button-ghost {
      background: transparent;
      border-color: $primary-color;
      color: $primary-color;

      &:hover {
        background-color: $primary-color;
        color: $white;
      }
    }
  }

  &.button-secondary {
    background-color: $secondary-color;
    border-color: $secondary-color;

    &:hover {
      background-color: lighten($secondary-color, 10%);
      border-color: lighten($secondary-color, 10%);
    }

    &.button-ghost {
      background: transparent;
      border-color: $secondary-color;
      color: $secondary-color;

      &:hover {
        background-color: $secondary-color;
        color: $white;
      }
    }
  }

  &.button-tertiary {
    background-color: $tertiary-color;
    border-color: $tertiary-color;

    &:hover {
      background-color: lighten($tertiary-color, 10%);
      border-color: lighten($tertiary-color, 10%);
    }

    &.button-ghost {
      background: transparent;
      border-color: $tertiary-color;
      color: $tertiary-color;

      &:hover {
        background-color: $tertiary-color;
        color: $white;
      }
    }
  }
}

@mixin elr-button-raised($config: ()) {
  $config: extend(
    (
      background-color: $primary-color,
    ),
    $config
  );

  $background-color: map-get($config, background-color);

  background-color: darken($background-color, 5%);
  border: 1px solid darken($background-color, 5%);
  // border-bottom: 4px solid darken($background-color, 15%);
  box-shadow: 0 4px 0 darken($background-color, 15%);
  border-radius: 0;
  transform: translateY(0);
  transition: border 0.3s, transform 0.3s, box-shadow 0.3s;

  &:hover {
    background-color: $background-color;
    border: 1px solid $background-color;
    box-shadow: 0 1px 0 darken($background-color, 15%);
    transform: translateY(-3px);
  }
}

@mixin elr-button-gradient($config: ()) {
  $config: extend(
    (
      background-color: $primary-color,
      accent-color: #db0079,
      text-shadow: $text-shadow,
      color: $white,
    ),
    $config
  );

  $background-color: map-get($config, background-color);
  $accent-color: map-get($config, accent-color);
  $text-shadow: map-get($config, text-shadow);
  $color: map-get($config, color);

  color: $color;
  border: 0;
  background-image: linear-gradient(
    to right,
    $accent-color 0%,
    $background-color 51%,
    $accent-color 100%
  );
  transition: 0.3s;
  background-size: 200% auto;
  text-shadow: $text-shadow;

  &:hover {
    border: 0;
    background-position: right center;
  }
}

@mixin elr-button-glass($config: ()) {
  $config: extend(
    (
      background-color: $primary-color,
      text-shadow: $text-shadow,
      color: $white,
    ),
    $config
  );

  $background-color: map-get($config, background-color);
  $text-shadow: map-get($config, text-shadow);
  $color: map-get($config, color);

  color: $color;
  border: 1px solid lighten($background-color, 20%);
  background-position: center bottom;
  background-image: linear-gradient(
    to top,
    lighten(lighten($background-color, 20%), 5%) 0%,
    $background-color 51%,
    $background-color 61%,
    lighten(lighten($background-color, 20%), 5%) 100%
  );
  transition: 0.3s;
  background-size: auto 150%;
  text-shadow: $text-shadow;
  border-radius: 100px;

  &:hover {
    border: 1px solid lighten($background-color, 20%);
    background-position: center top;
  }
}

@mixin elr-button-context($config: ()) {
  &.button-danger {
    background-color: $danger-color;
    border-color: $danger-color;

    &:hover {
      background-color: lighten($danger-color, 10%);
      border-color: lighten($danger-color, 10%);
    }

    &.button-ghost {
      background: transparent;
      border-color: $danger-color;
      color: $danger-color;

      &:hover {
        background-color: $danger-color;
        color: $white;
      }
    }
  }

  &.button-warning {
    background-color: $warning-color;
    border-color: $warning-color;

    &:hover {
      background-color: lighten($warning-color, 10%);
      border-color: lighten($warning-color, 10%);
    }

    &.button-ghost {
      background: transparent;
      border-color: $warning-color;
      color: $warning-color;

      &:hover {
        background-color: $warning-color;
        color: $white;
      }
    }
  }

  &.button-success {
    background-color: $success-color;
    border-color: $success-color;

    &:hover {
      background-color: lighten($success-color, 10%);
      border-color: lighten($success-color, 10%);
    }

    &.button-ghost {
      background: transparent;
      border-color: $success-color;
      color: $success-color;

      &:hover {
        background-color: $success-color;
        color: $white;
      }
    }
  }

  &.button-muted {
    background-color: $muted-color;
    border-color: $muted-color;

    &:hover {
      background-color: lighten($muted-color, 10%);
      border-color: lighten($muted-color, 10%);
    }

    &.button-ghost {
      background: transparent;
      border-color: $muted-color;
      color: $muted-color;

      &:hover {
        background-color: $muted-color;
        color: $white;
      }
    }
  }

  &.button-info {
    background-color: $info-color;
    border-color: $info-color;

    &:hover {
      background-color: lighten($info-color, 10%);
      border-color: lighten($info-color, 10%);
    }

    &.button-ghost {
      background: transparent;
      border-color: $info-color;
      color: $info-color;

      &:hover {
        background-color: $info-color;
        color: $white;
      }
    }
  }
}

@mixin elr-icon-button($config: ()) {
  $config: extend(
    (
      round: false,
    ),
    $config
  );

  $round: map-get($config, round);
  width: auto;
  min-width: auto;
  display: inline-flex;
  align-items: center;
  padding-left: $base-fontsize * 2;
  padding-right: $base-fontsize * 2;

  @if $round == true {
    border-radius: 50%;
    padding: $base-fontsize;

    .icon {
      font-size: 20px;
    }
  }

  .icon {
    display: inline-block;
  }

  .button-text {
    padding-left: $base-fontsize;
    padding-right: $base-fontsize;
  }
}

// Button Groups

@mixin elr-button-group($config: ()) {
  $config: extend(
    (
      border-radius: 3px,
      direction: row,
      width: auto,
    ),
    $config
  );

  $border-radius: map-get($config, border-radius);
  $direction: map-get($config, direction);
  $width: map-get($config, width);

  border-collapse: collapse;
  display: flex;
  flex-direction: $direction;

  @media (max-width: 568px) {
    flex-direction: column;
  }

  .button-group-item {
    margin: 0;
    border-left-width: 0;
    border-radius: 0;
    font-size: 14px;
    line-height: 1;
    width: $width;

    &:first-of-type {
      border-left-width: 1px;
    }

    @if $border-radius != 0 and $direction == row {
      &:first-of-type {
        border-radius: $border-radius 0 0 $border-radius;
      }

      &:last-of-type {
        border-radius: 0 $border-radius $border-radius 0;
      }
    } @else if $border-radius != 0 and $direction == column {
      display: inline-block;

      &:first-of-type {
        border-radius: $border-radius $border-radius 0 0;
      }
      &:last-of-type {
        border-radius: 0 0 $border-radius $border-radius;
      }
    }
  }
}
